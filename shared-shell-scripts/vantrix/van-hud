#!/bin/bash
VANTRIX_SERVICES="ltrx rmss esg mpc mpcms hms vta oamgui vrm ingm rabbitmq-server vta-context"

__is_active() {
    systemctl > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        systemctl is-active $1 > /dev/null 2>&1
    else
        service $1 status > /dev/null 2>&1
        #return $?
        #local return_status=$?
        #if [ "$return_status" = "0" ]; then
            #return 0
        #elif [ "$return_status" = "3" ]; then
            #return 1
        #fi
    fi
}

__is_failed() {
    systemctl > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        systemctl is-failed $1 > /dev/null 2>&1
    else
        chkconfig $1
        if [ "$?" = "0" ]; then
            service $1 status > /dev/null 2>&1
            if [ "$?" = "1" ]; then
                return 0
            else
                return 1
            fi
        else
            return 1
        fi
    fi
}


__is_enabled() {
    systemctl > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        systemctl is-enabled $1 > /dev/null 2>&1
    else
        chkconfig $1 > /dev/null  2>&1
        #return $?
    fi
}

__puppet_active() {
    ps -C puppet,puppetmasterless,puppetmasterful > /dev/null || ps -ef | grep -i agent_postinstall | grep -v grep > /dev/null 2>&1
    local PUPPET_ACTIVE=$?
    if [ $PUPPET_ACTIVE -eq 0 ]; then
        #echo -e "\005{G}[\005{-} \005{bw}Applying Puppet\005{-} \005{G}]\005{-}"
        echo "Applying Puppet"
    fi
}

__active_non_failed_services() {
    CHUNK=""
    for i in $VANTRIX_SERVICES; do
        __is_active $i > /dev/null
        local result=$?
        if [ "$result" = "0" ]; then
            _build_chunk "$i"
        fi
    done
    echo -n $CHUNK
}

__inactive_services() {
    CHUNK=""
    for i in $VANTRIX_SERVICES; do
        __is_enabled $i
        local enabled=$?
        __is_active $i
        local active=$?
        #echo "$i $enabled $active"
        if [ "$enabled" = "0" -a "$active" = "3" ]; then
            _build_chunk "$i"
        fi
    done
    echo -n $CHUNK
}

__failed_services() {
    CHUNK=""
    for i in $VANTRIX_SERVICES; do
        __is_failed $i > /dev/null
        local result=$?
        if [ $result = 0 ]; then
            _build_chunk "$i"
        fi
    done
    echo -n $CHUNK
}

__weird_services() {
    CHUNK=""
    for i in $VANTRIX_SERVICES; do
        __is_enabled $i > /dev/null
        local enabled=$?
        __is_active $i > /dev/null
        local active=$?
        if [ $enabled = 0 -a $active = 1 ]; then
            _build_chunk "$i"
        fi
    done
    echo -n $CHUNK
}

__gluster_status() {
    GLUSTER_OUTPUT=""
    local GLUSTER_VOLS=`gluster volume list`
    for i in $GLUSTER_VOLS; do
        local FREE=`df -h | grep $i | awk '{print $5}' | sed s/.$//`
        if [ $FREE -lt 90 ]; then
            GLUSTER_OUTPUT="$GLUSTER_OUTPUT $i ($FREE%)"
        elif [ $FREE -gt 98 ]; then
            GLUSTER_OUTPUT="$GLUSTER_OUTPUT $i ($FREE%)"
        else
            GLUSTER_OUTPUT="$GLUSTER_OUTPUT $i ($FREE%)"
        fi
    done
    echo -n $GLUSTER_OUTPUT
}

__mongo_status() {
    MONGO_OUTPUT=""
    __is_enabled mongod > /dev/null 2>&1
    local ENABLED=$?
    __is_active mongod > /dev/null
    local ACTIVE=$?
    __is_failed mongod > /dev/null
    local FAILED=$?
    if [ "$ENABLED" = "0" ]; then
        local REPL=$(grep -e '^\s*replSet\s*=\s*.\+' < /etc/mongodb.conf | sed 's|\s*replSet\s*=\s*\(.*\)|\1|')
        if [ "$ACTIVE" = "0" ]; then
            local RS=`mongo --quiet --eval 'rs.conf()'`
            local STATUS=`mongo --quiet --eval 'printjson(db.isMaster()["ismaster"])'`
            if [ "$RS" = 'null' ]; then
                MONGO_OUTPUT="Standalone"
            elif [ "$STATUS" = 'true' ]; then
                MONGO_OUTPUT="Primary"
            else
                MONGO_OUTPUT="Secondary"
            fi
        elif [ "$FAILED" = "0" ]; then
            MONGO_OUTPUT="Failed"
        else
            MONGO_OUTPUT="Inactive"
        fi
    fi
    if [ -n "$REPL" ]; then
        MONGO_OUTPUT="$MONGO_OUTPUT ($REPL)"
    fi
    echo -n $MONGO_OUTPUT
}

__dunno_services() {
    # TODO: Make a case for when a service is active but not enabled
    services="ltrx rmss esg mpc mpcms hms vta oamgui vrm ingm rabbitmq-server"
    SERVICES_OUTPUT=""
    for i in $services; do
        ENABLED_OUTPUT=`systemctl is-enabled $i`
        ENABLED=$?
        systemctl is-active $i > /dev/null
        ACTIVE=$?
        systemctl is-failed $i > /dev/null
        FAILED=$?
        #export LOADED=`systemctl status $i | grep -i loaded | awk '{print $2}'`
        #export ACTIVE=`systemctl status $i | grep -i active | awk '{print $2}'`
        if [ $ACTIVE = 0 ]; then
            # Service is operational
            SERVICES_OUTPUT="$SERVICES_OUTPUT \005{g}$i\005{-}"
        elif [ $ENABLED = 1 ]; then
            # Service is not enabled on this machine
            SERVICES_OUTPUT="$SERVICES_OUTPUT"
        elif [ $ENABLED = 0 -a $FAILED = 0 ]; then
            # Service is in failed state!!
            SERVICES_OUTPUT="$SERVICES_OUTPUT \005{b r}$i\005{-}"
        #elif [ $ENABLED = 0 -a $ENABLED_OUTPUT = 'static' ]; then
            ## Service is set to 'static'
            ##SERVICES_OUTPUT="$SERVICES_OUTPUT \005{G}$i\005{-}"
            #SERVICES_OUTPUT="$SERVICES_OUTPUT"
        else
            # Service is in weird / unknown state
            SERVICES_OUTPUT="$SERVICES_OUTPUT \005{y}$i\005{-}"
        fi
    done
}

_build_chunk() {
    if [ -z "$CHUNK" ]; then
        CHUNK="$1"
    else
        CHUNK="$CHUNK $1"
    fi
}

_add_command() {
    if [ -z "$COMMANDS" ]; then
        COMMANDS="$1"
    else
        COMMANDS="$COMMANDS $1"
    fi
}

_set_screen() {
    _SCREEN_MODE=1
    RED="r"
    GREEN="g"
}

_set_tmux() {
    _TMUX_MODE=1
}

#_colorize() {
    #if [ -n "$_SCREEN_MODE" ]; then
        #echo -e "\005{$1}$2"
    #else
        #echo -e "\e[${1}m;

#_red() {
    #RED="\005{r}"

#_good_output() {

#_set_sep() {
    #if [ -n "$POWERLINE_FONT" ]; then
        #LEFT_SEP=
        #RIGHT_SEP=
    #if [ "$1" = "left" ]; then
        #SEPARATOR=

_output() {
    if [ -n "$_TMUX_MODE" -o -n "$_SCREEN_MODE" ]; then
        echo -n "$1"
    else
        echo "$1"
    fi
}

# Actual definition
van-hud() {
    local COMMANDS
    # Consume command line arguments
    while [[ $# > 0 ]]; do
        case $1 in
            #-h|--help)
                #_iperf_si_usage
                #exit 0
                #;;
            --active-services|--failed-services|--gluster|--mongo|--deployment|--inactive-services)
                _add_command $1
                ;;
            --screen)
                _set_screen
                ;;
            --tmux)
                _set_tmux
                ;;
            --left|--right)
                _set_sep $1
                ;;
            *)
                shift
                ;;
        esac
        shift
    done
    for cmd in $COMMANDS; do        
        case $cmd in
            --active-services)
                _output "$(__active_non_failed_services)"
                ;;
            --failed-services)
                _output "$(__failed_services)"
                ;;
            --inactive-services)
                _output "$(__inactive_services)"
                ;;
            --gluster)
                _output "$(__gluster_status)"
                ;;
            --mongo)
                _output "$(__mongo_status)"
                ;;
            --deployment)
                _output "$(__mongo_status)"
                ;;
        esac
    done
}

if [ -n "$1" ]; then
    # We're being called as a script, rather than just being sourced
    van-hud "$@"
fi
