# TODO: make version-specific sources
# Since tmux uses the underlying shell in a non-login and non-interactive manner,
# dotfiles aren't sourced. Thus any pure shell functions need to be wrapped. I
# simply added wrapper code in the files themselves which run the function when
# an argument is given.
#
# The functions are defined as variables for convenience's sake.
START_REMOTE_ENV_SCRIPT="~/$DOTFILES/shared-shell-scripts/start-remote-env"
EMBED_TMUX="~/$DOTFILES/shared-shell-scripts/embed-tmux"

# TODO: Remove these bindings and put them in a config sourced by environment
# load a soak1 session
bind M-s if-shell 'tmux has-session -t Soak-109' 'attach-session -t Soak-109' 'source-file ~/dotfiles/tmux/tmux-soak1.conf'
# load a soak2 session
bind C-s if-shell 'tmux has-session -t Soak-108' 'attach-session -t Soak-108' 'source-file ~/dotfiles/tmux/tmux-soak2.conf'
# load a HMS Char session
bind h if-shell 'tmux has-session -t Char-107' 'attach-session -t Char-107' 'source-file ~/dotfiles/tmux/tmux-char.conf'

# Reload tmux config
bind C-r source-file ~/$DOTFILES/tmux/tmux.conf

# Add the current X clipboard to the tmux buffer, and paste it
bind b run "xclip -o -sel clipboard | tmux load-buffer - | tmux paste-buffer"

# Paste SVN password
bind v run-shell 'tmux load-buffer ~/.credentials/svn && tmux paste-buffer -d'

# Bind k for when a window is crashed or dead
bind k confirm-before kill-pane
# Respawn a dead pane (only useful when remain-on-exit is on)
bind r if-shell '[ "#{pane_dead}" = "1" ]' 'respawn-pane' 'send-keys C-a r'

### Powerline stuff
# If we're not using powerline-patched fonts, grab the no_powerline config
if-shell '[ "$POWERLINE_FONT" = "1" ]' "run-shell \"ln -fs $HOME/$DOTFILES/powerline/config_powerline.json $HOME/$DOTFILES/powerline/config.json\"" "run-shell \"ln -fs $HOME/$DOTFILES/powerline/config_unicode.json $HOME/$DOTFILES/powerline/config.json\""
# If we're running locally, ensure a single powerline daemon is running
# If we're running remotely, ensure a powerline exists on socket $REMOTE_USER 
run-shell "POWERLINE_CONFIG_OVERRIDES='ext.tmux.colorscheme=solarized' powerline-config tmux setup"
run-shell 'if [ -n "$REMOTE_USER" ]; then export POWERLINE_COMMAND_ARGS="--socket $REMOTE_USER"; powerline-daemon -q --socket $REMOTE_USER; else powerline-daemon -q; fi'

# Make the left statusbar able to be large
set-option -g status-left-length 80

# Source a termcap file which properly supports standout and italics
set -g default-terminal "screen-256color"

# Synchronize panes
bind S setw synchronize-panes

# Switch embedded tmux/screen windows
bind -n C-Left send-keys C-a p
bind -n C-Right send-keys C-a n

# Switch embedded tmux/screen windows
bind -r C-Left send-keys C-a S-Left
bind -r C-Right send-keys C-a S-Right

# Use Alt-vim keys without prefix key to switch windows and embedded windows
bind -n M-h run "(tmux display-message -p '#T' | grep -iqe 'screen\\|tmux' && tmux send-keys M-j) || tmux previous-window"
bind -n M-j previous-window
bind -n M-k next-window
bind -n M-l run "(tmux display-message -p '#T' | grep -iqe 'screen\\|tmux' && tmux send-keys M-k) || tmux next-window"

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Shift arrow with prefix to swap window locations
bind -r  S-Left select-window -p\; select-pane -m\; select-window -n\; swap-window\; select-window -p\; select-pane -M
bind -r S-Right select-window -n\; select-pane -m\; select-window -p\; swap-window\; select-window -n\; select-pane -M

# Use Ctrl-vim keys without prefix key to switch panes
bind -n C-h run "(tmux display-message -p '#T' | grep -iqe 'vim\\|tmux' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#T' | grep -iqe 'vim\\|tmux' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#T' | grep -iqe 'vim\\|tmux' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#T' | grep -iqe 'vim\\|tmux' && tmux send-keys C-l) || tmux select-pane -R"

# Vim-like behaviour
set -g status-keys vi
set-window-option -g mode-keys vi

# History size, duh
set -g history-limit 100000

# Make windows start at 1 instead of 0
set -g base-index 1
# Rebind 0 to window 10
bind 0 select-window -t 10

## message text
#set-option -g message-bg colour235 #base02
#set-option -g message-fg colour166 #orange

## clock
#set-window-option -g clock-mode-colour colour64 #green

# Do terminal bell if any window makes a bell
set -g bell-action any
# Make an actual terminal bell when tmux sees a bell
set -g bell-on-alert on
# Always maintain contiguous window numbering
set -g renumber-windows on
# Display a message when tmux sees a bell
set -g visual-bell on
# Do not display a message when activity happens
set -g visual-activity off
# Do not monitor activity
set-window-option -g monitor-activity off
# Allow for the ANSI control sequence for setting terminal title
# Note that tmux will ignore the control sequence if a window title has
# been manually set
set-window-option -g allow-rename on
set-option -g allow-rename on
# Never wait for multi-key escapes
set -s escape-time 0
# Message display time of 2s
set -g display-time 2000

# Source in some specific things depending on whether we're running locally or remote
# automatic-rename
# source/reload config
if-shell '[ -n "$REMOTE_USER" -o -n "$EMBEDDED" ]' "source ~/$DOTFILES/tmux/tmux-remote.conf" "source ~/$DOTFILES/tmux/tmux-local.conf"
# hack for embedded
if-shell '[ -n "$EMBEDDED" ]' 'bind -t vi-copy Enter copy-pipe "tmux -S $TMUX_MASTER load-buffer -"'

### Based on what is currently running in the window, handle some keys differently
# If screen is running, send equivalent default screen keys.
# If tmux is running, send through the tmux keys to the embedded tmux
# If some other program is running, do the equivalent tmux action
bind PgUp run-shell "case \"$(tmux display-message -p '#T')\" in *screen*) tmux send-keys C-a [ PgUp;; *tmux*) tmux send-keys C-a PgUp;; *) tmux copy-mode -u;; esac"
bind [ run-shell "case \"$(tmux display-message -p '#T')\" in *screen*|*tmux*) tmux send-keys C-a [;; *) tmux copy-mode;; esac"
unbind c
bind c run-shell "case \"$(tmux display-message -p '#T')\" in *screen*) tmux send-keys C-a c;; *tmux*) tmux send-keys C-a c;; *) tmux new-window;; esac"
# Intuitive splitting, but with embedded tmux support
unbind '"'
unbind %
bind | run-shell "case \"$(tmux display-message -p '#T')\" in *tmux*) tmux send-prefix && tmux send-keys \\|;; *) tmux split-window -h;; esac"
bind - run-shell "case \"$(tmux display-message -p '#T')\" in *tmux*) tmux send-prefix && tmux send-keys -;; *) tmux split-window -v;; esac"

# Always make a new window with C-c
bind C-c new-window

# Killing windows can be annoying if remain-on-exit is set. This makes it easy
# to close a window by double-tapping C-d
bind -n C-d if-shell '[ "#{pane_dead}" = "1" ]' 'kill-pane' 'send-keys C-d'

if-shell "[ -n \"$LAUNCH_SESSION_CONF\" ]" "source $HOME/$DOTFILES/tmux/sessions/$LAUNCH_SESSION_CONF"

# Launch pre-made window configs
if-shell '[ -n "$ENVIRONMENT" ]' "source $HOME/$DOTFILES/tmux/windows/$ENVIRONMENT/tmux-$ENVIRONMENT-window-loader.conf"

set-option -g status-left-length 150

# Always update the LOOPBACK_PORT when re-attaching to a session
set-option -ga update-environment " LOOPBACK_PORT LOCAL_DISPLAY"
